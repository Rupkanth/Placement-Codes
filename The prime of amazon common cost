def findMaximumSum(stock,k): 
    sum,m,x=0,0,1 
    for i in range(len(stock)-k+1): 
        a=stock[i:i+k] 
        x=1 
        sum=0 
        for j in a: 
            if(a.count(j)>1): 
                x=0 
                break 
            else: 
                sum+=j 
        if(x==1 and m<sum): 
            m=sum 
    if(m==0): 
        return -1 
    else: 
        return m 
print("Enter the stock prices:") 
stock=list(map(int,input().split())) 
k=int(input("Enter k value:")) 
print("\nResult=", 
findMaximumSum(stock,k))

//C++
#include<bits/stdc++.h>
using namespace std;
int solve(vector<int> a,int n,int k)
{       
     int s=0,ans=-1;
        unordered_map<int,int> mp; 
     vector<int> dist,sum;
        for(int i=0;i<k;i++)
        {
            mp[a[i]]++;
            s+=a[i];
        }
        sum.push_back(s);
        dist.push_back((int)mp.size());
        for(int i=k;i<n;i++)
        {
            mp[a[i-k]]-=1;
            if(mp[a[i-k]]==0)
            mp.erase(a[i-k]);
            mp[a[i]]++;
            s+=a[i];
         s-=a[i-k];
         sum.push_back(s);
            dist.push_back((int)mp.size());
        }
       int p = dist.size();
       for(int i=0;i<p;i++)
       {
          if(dist[i]==k)
          ans = max(ans,sum[i]);
       }
       return ans;
}
int main()
{

 int n,k;
 cin>>n>>k;
 vector<int> a(n);
 for(int i=0;i<n;i++)
 cin>>a[i];
    cout<<solve(a,n,k);
 
}
