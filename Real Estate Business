  boolean[][] matrix = new boolean[n][m];
  for(int i = 0; i < n; i ++) {
   for(int j = 0; j < m; j++) {
    if(clients[i][0]<= houses[j][0] && clients[i][1] >= houses[j][1] )
     matrix[i][j] = true;
   }
  }
  
  int [] matchR = new int [m];
  Arrays.fill(matchR, -1);
  
  int result = 0;

  
  for(int u = 0 ; u< n; u++) {
   boolean[] isSeen = new boolean[m];
   if(findHouse(matrix, u, isSeen, matchR)) {
       result++; 
   }
  }
  return result;
  }
static boolean findHouse(boolean[][] matrix, int clientU, boolean[] isSeen, int[] matchR ) {
  int length = isSeen.length;
  for(int v = 0; v < length; v ++) {
   if(matrix[clientU][v] == true && !isSeen[v]) {
    isSeen[v] = true;
    
    if(matchR[v] < 0 || findHouse(matrix, matchR[v], isSeen, matchR)) {
     matchR[v] = clientU;
     return true;
    }
   }
  }
  
  return false;
 }

